using EemCore.Models;
using EemCore.Services.Resilient;
using Microsoft.Extensions.Logging;
using Microsoft.MCP;
using System.ComponentModel;
using System.Text;

namespace EemCore.Processing
{
    /// <summary>
    /// Serviço de verificação de saúde para os agentes do sistema Εεm
    /// </summary>
    public class EemHealthCheckHelper
    {
        private readonly ILogger<EemHealthCheckHelper> _logger;
        private readonly ResilientBlobServiceClient _blobServiceClient;
        private readonly ResilientCosmosClient _cosmosClient;
        
        public EemHealthCheckHelper(
            ILogger<EemHealthCheckHelper> logger,
            ResilientBlobServiceClient blobServiceClient,
            ResilientCosmosClient cosmosClient)
        {
            _logger = logger;
            _blobServiceClient = blobServiceClient;
            _cosmosClient = cosmosClient;
        }
        
        /// <summary>
        /// Verifica a conectividade com o Azure Blob Storage
        /// </summary>
        public async Task<bool> CheckBlobStorageConnectivityAsync()
        {
            try
            {
                var containers = new[] {
                    "aje-files", "ire-files", "e-files", "scripts"
                };
                
                // Tentar acessar um dos containers
                var container = _blobServiceClient.GetBlobContainerClient(containers[0]);
                await container.ExistsAsync();
                
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao verificar conectividade com Blob Storage");
                return false;
            }
        }
        
        /// <summary>
        /// Verifica a conectividade com o Cosmos DB
        /// </summary>
        public async Task<bool> CheckCosmosDbConnectivityAsync(string databaseId)
        {
            try
            {
                var containers = new[] {
                    "EmbeddingsCollection", "relationalgraph", "EulerianFlows"
                };
                
                // Tentar acessar um dos containers
                var container = _cosmosClient.GetContainer(databaseId, containers[0]);
                
                // Consulta simples para verificar se podemos acessar
                var query = "SELECT VALUE COUNT(1) FROM c";
                var iterator = container.GetItemQueryIterator<int>(query);
                await iterator.ReadNextAsync();
                
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao verificar conectividade com Cosmos DB");
                return false;
            }
        }
    }
}